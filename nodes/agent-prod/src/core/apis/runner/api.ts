/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, createRequestFunction, DUMMY_BASE_URL, serializeDataIfNeeded, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, toPathString } from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface ExecException
 */
export interface ExecException {
	/**
	 *
	 * @type {string}
	 * @memberof ExecException
	 */
	"cmd"?: string | null;
	/**
	 *
	 * @type {boolean}
	 * @memberof ExecException
	 */
	"killed"?: boolean | null;
	/**
	 *
	 * @type {number}
	 * @memberof ExecException
	 */
	"code"?: number | null;
	/**
	 *
	 * @type {string}
	 * @memberof ExecException
	 */
	"signal"?: string | null;
}

/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
	/**
	 * The error name
	 * @type {string}
	 * @memberof GenericError
	 */
	"name": string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof GenericError
	 */
	"message": string;

	[key: string]: any;
}

/**
 *
 * @export
 * @interface RunRequest
 */
export interface RunRequest {
	/**
	 *
	 * @type {string}
	 * @memberof RunRequest
	 */
	"cwd": string;
	/**
	 *
	 * @type {string}
	 * @memberof RunRequest
	 */
	"command": string;
	/**
	 *
	 * @type {boolean}
	 * @memberof RunRequest
	 */
	"admin"?: boolean;
}

/**
 *
 * @export
 * @interface RunResponse
 */
export interface RunResponse {
	/**
	 *
	 * @type {number}
	 * @memberof RunResponse
	 */
	"code": number;
	/**
	 *
	 * @type {RunResponseError}
	 * @memberof RunResponse
	 */
	"error"?: RunResponseError | null;
	/**
	 *
	 * @type {string}
	 * @memberof RunResponse
	 */
	"signal"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof RunResponse
	 */
	"stderr": string;
	/**
	 *
	 * @type {string}
	 * @memberof RunResponse
	 */
	"stdout": string;
}

/**
 *
 * @export
 * @interface RunResponseError
 */
export interface RunResponseError {
	/**
	 *
	 * @type {string}
	 * @memberof RunResponseError
	 */
	"cmd"?: string | null;
	/**
	 *
	 * @type {boolean}
	 * @memberof RunResponseError
	 */
	"killed"?: boolean | null;
	/**
	 *
	 * @type {number}
	 * @memberof RunResponseError
	 */
	"code"?: number | null;
	/**
	 *
	 * @type {string}
	 * @memberof RunResponseError
	 */
	"signal"?: string | null;
}

/**
 *
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
	/**
	 * The error name
	 * @type {string}
	 * @memberof Unauthorized
	 */
	"name": string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof Unauthorized
	 */
	"message": string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof Unauthorized
	 */
	"status": number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof Unauthorized
	 */
	"errors"?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof Unauthorized
	 */
	"stack"?: string;
}

/**
 * RunnerApi - axios parameter creator
 * @export
 */
export const RunnerApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		run: async (runRequest: RunRequest, authenticationToken?: string, authenticationToken2authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'runRequest' is not null or undefined
			assertParamExists("run", "runRequest", runRequest);
			const localVarPath = `/api/run`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(runRequest, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {"CICD"} authenticationApp
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		runFromApp: async (authenticationApp: "CICD", runRequest: RunRequest, authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'authenticationApp' is not null or undefined
			assertParamExists("runFromApp", "authenticationApp", authenticationApp);
			// verify required parameter 'runRequest' is not null or undefined
			assertParamExists("runFromApp", "runRequest", runRequest);
			const localVarPath = `/api/run/app`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			if (authenticationApp !== undefined && authenticationApp !== null) {
				localVarHeaderParameter["authentication-app"] = String(authenticationApp);
			}


			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(runRequest, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * RunnerApi - functional programming interface
 * @export
 */
export const RunnerApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = RunnerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async run(runRequest: RunRequest, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.run(runRequest, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {"CICD"} authenticationApp
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async runFromApp(authenticationApp: "CICD", runRequest: RunRequest, authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResponse>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.runFromApp(authenticationApp, runRequest, authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * RunnerApi - factory interface
 * @export
 */
export const RunnerApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = RunnerApiFp(configuration);
	return {
		/**
		 *
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		run(runRequest: RunRequest, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<RunResponse> {
			return localVarFp.run(runRequest, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {"CICD"} authenticationApp
		 * @param {RunRequest} runRequest
		 * @param {string} [authenticationToken]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		runFromApp(authenticationApp: "CICD", runRequest: RunRequest, authenticationToken?: string, options?: any): AxiosPromise<RunResponse> {
			return localVarFp.runFromApp(authenticationApp, runRequest, authenticationToken, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * RunnerApi - object-oriented interface
 * @export
 * @class RunnerApi
 * @extends {BaseAPI}
 */
export class RunnerApi extends BaseAPI {
	/**
	 *
	 * @param {RunRequest} runRequest
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RunnerApi
	 */
	public run(runRequest: RunRequest, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return RunnerApiFp(this.configuration).run(runRequest, authenticationToken, authenticationToken2, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {"CICD"} authenticationApp
	 * @param {RunRequest} runRequest
	 * @param {string} [authenticationToken]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RunnerApi
	 */
	public runFromApp(authenticationApp: "CICD", runRequest: RunRequest, authenticationToken?: string, options?: AxiosRequestConfig) {
		return RunnerApiFp(this.configuration).runFromApp(authenticationApp, runRequest, authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}
}


