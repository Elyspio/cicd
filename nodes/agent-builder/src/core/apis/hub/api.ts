/* tslint:disable */
/* eslint-disable */
/**
 * CICD Hub
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, createRequestFunction, DUMMY_BASE_URL, serializeDataIfNeeded, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, toPathString } from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface AddMappingRequest
 */
export interface AddMappingRequest {
	/**
	 *
	 * @type {BuildConfig}
	 * @memberof AddMappingRequest
	 */
	"build"?: BuildConfig;
	/**
	 *
	 * @type {DeployConfig}
	 * @memberof AddMappingRequest
	 */
	"deploy"?: DeployConfig;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum AgentAvailability {
	Down = "Down",
	Running = "Running",
	Free = "Free"
}


/**
 *
 * @export
 * @interface AgentBuild
 */
export interface AgentBuild {
	/**
	 *
	 * @type {AgentAvailability}
	 * @memberof AgentBuild
	 */
	"availability": AgentAvailability;
	/**
	 *
	 * @type {string}
	 * @memberof AgentBuild
	 */
	"lastUpTime": string;
	/**
	 *
	 * @type {string}
	 * @memberof AgentBuild
	 */
	"url": string;
	/**
	 *
	 * @type {string}
	 * @memberof AgentBuild
	 */
	"id": string;
	/**
	 *
	 * @type {Array<BuildAbility>}
	 * @memberof AgentBuild
	 */
	"abilities": Array<BuildAbility>;
}

/**
 *
 * @export
 * @interface AgentDeploy
 */
export interface AgentDeploy {
	/**
	 *
	 * @type {AgentAvailability}
	 * @memberof AgentDeploy
	 */
	"availability": AgentAvailability;
	/**
	 *
	 * @type {string}
	 * @memberof AgentDeploy
	 */
	"lastUpTime": string;
	/**
	 *
	 * @type {string}
	 * @memberof AgentDeploy
	 */
	"url": string;
	/**
	 *
	 * @type {string}
	 * @memberof AgentDeploy
	 */
	"id": string;
	/**
	 *
	 * @type {DeployAgentFolders}
	 * @memberof AgentDeploy
	 */
	"folders": DeployAgentFolders;
	/**
	 *
	 * @type {Array<DeployAbility>}
	 * @memberof AgentDeploy
	 */
	"abilities": Array<DeployAbility>;
}

/**
 *
 * @export
 * @interface BranchDetail
 */
export interface BranchDetail {
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BranchDetail
	 */
	"bakeFiles": Array<string>;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BranchDetail
	 */
	"dockerComposeFiles": Array<string>;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BranchDetail
	 */
	"dockerfiles": Array<string>;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BranchDetail
	 */
	"files": Array<string>;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BranchDetail
	 */
	"folders": Array<string>;
	/**
	 *
	 * @type {string}
	 * @memberof BranchDetail
	 */
	"name": string;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum BuildAbility {
	Docker = "Docker",
	DockerBuildx = "DockerBuildx"
}


/**
 *
 * @export
 * @interface BuildBakeConfig
 */
export interface BuildBakeConfig {
	/**
	 *
	 * @type {string}
	 * @memberof BuildBakeConfig
	 */
	"bakeFilePath": string;
}

/**
 *
 * @export
 * @interface BuildConfig
 */
export interface BuildConfig {
	/**
	 *
	 * @type {BuildBakeConfig}
	 * @memberof BuildConfig
	 */
	"bake"?: BuildBakeConfig;
	/**
	 *
	 * @type {BuildDockerfileConfig}
	 * @memberof BuildConfig
	 */
	"dockerfile"?: BuildDockerfileConfig;
	/**
	 *
	 * @type {BuildGithubConfig}
	 * @memberof BuildConfig
	 */
	"github": BuildGithubConfig;
}

/**
 *
 * @export
 * @interface BuildDockerfileConfig
 */
export interface BuildDockerfileConfig {
	/**
	 *
	 * @type {Array<string>}
	 * @memberof BuildDockerfileConfig
	 */
	"platforms": Array<string>;
	/**
	 *
	 * @type {string}
	 * @memberof BuildDockerfileConfig
	 */
	"username": string;
	/**
	 *
	 * @type {Array<BuildDockerfileFileConfig>}
	 * @memberof BuildDockerfileConfig
	 */
	"files": Array<BuildDockerfileFileConfig>;
}

/**
 *
 * @export
 * @interface BuildDockerfileFileConfig
 */
export interface BuildDockerfileFileConfig {
	/**
	 *
	 * @type {string}
	 * @memberof BuildDockerfileFileConfig
	 */
	"image": string;
	/**
	 *
	 * @type {string}
	 * @memberof BuildDockerfileFileConfig
	 */
	"path": string;
	/**
	 *
	 * @type {string}
	 * @memberof BuildDockerfileFileConfig
	 */
	"tag"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof BuildDockerfileFileConfig
	 */
	"workingDirectory": string;
}

/**
 *
 * @export
 * @interface BuildGithubConfig
 */
export interface BuildGithubConfig {
	/**
	 *
	 * @type {string}
	 * @memberof BuildGithubConfig
	 */
	"branch": string;
	/**
	 *
	 * @type {string}
	 * @memberof BuildGithubConfig
	 */
	"commit"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof BuildGithubConfig
	 */
	"remote": string;
}

/**
 *
 * @export
 * @interface DeployAbility
 */
export interface DeployAbility {
	/**
	 *
	 * @type {DeployAbilityType}
	 * @memberof DeployAbility
	 */
	"type": DeployAbilityType;
	/**
	 *
	 * @type {DeployDockerComposeAbility}
	 * @memberof DeployAbility
	 */
	"dockerCompose"?: DeployDockerComposeAbility;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum DeployAbilityType {
	Docker = "Docker",
	DockerCompose = "DockerCompose"
}


/**
 *
 * @export
 * @interface DeployAgentFolders
 */
export interface DeployAgentFolders {
	/**
	 *
	 * @type {Array<string>}
	 * @memberof DeployAgentFolders
	 */
	"apps": Array<string>;
}

/**
 *
 * @export
 * @interface DeployConfig
 */
export interface DeployConfig {
	/**
	 *
	 * @type {string}
	 * @memberof DeployConfig
	 */
	"url": string;
	/**
	 *
	 * @type {DeployDockerConfig}
	 * @memberof DeployConfig
	 */
	"docker": DeployDockerConfig;
}

/**
 *
 * @export
 * @interface DeployDockerComposeAbility
 */
export interface DeployDockerComposeAbility {
	/**
	 *
	 * @type {boolean}
	 * @memberof DeployDockerComposeAbility
	 */
	"integratedToCLi": boolean;
}

/**
 *
 * @export
 * @interface DeployDockerComposeConfig
 */
export interface DeployDockerComposeConfig {
	/**
	 *
	 * @type {string}
	 * @memberof DeployDockerComposeConfig
	 */
	"path": string;
}

/**
 *
 * @export
 * @interface DeployDockerConfig
 */
export interface DeployDockerConfig {
	/**
	 *
	 * @type {DeployDockerComposeConfig}
	 * @memberof DeployDockerConfig
	 */
	"compose": DeployDockerComposeConfig;
}

/**
 *
 * @export
 * @interface GitHubRepository
 */
export interface GitHubRepository {
	/**
	 *
	 * @type {{ [key: string]: BranchDetail; }}
	 * @memberof GitHubRepository
	 */
	"branches": { [key: string]: BranchDetail; };
	/**
	 *
	 * @type {string}
	 * @memberof GitHubRepository
	 */
	"name": string;
}

/**
 *
 * @export
 * @interface HubConfig
 */
export interface HubConfig {
	/**
	 *
	 * @type {HubConfigAgents}
	 * @memberof HubConfig
	 */
	"agents": HubConfigAgents;
	/**
	 *
	 * @type {HubConfigJobs}
	 * @memberof HubConfig
	 */
	"jobs": HubConfigJobs;
	/**
	 *
	 * @type {HubConfigJobs}
	 * @memberof HubConfig
	 */
	"queues": HubConfigJobs;
	/**
	 *
	 * @type {Array<Mapping>}
	 * @memberof HubConfig
	 */
	"mappings": Array<Mapping>;
}

/**
 *
 * @export
 * @interface HubConfigAgents
 */
export interface HubConfigAgents {
	/**
	 *
	 * @type {Array<AgentBuild>}
	 * @memberof HubConfigAgents
	 */
	"builds": Array<AgentBuild>;
	/**
	 *
	 * @type {Array<AgentDeploy>}
	 * @memberof HubConfigAgents
	 */
	"deploys": Array<AgentDeploy>;
}

/**
 *
 * @export
 * @interface HubConfigJobs
 */
export interface HubConfigJobs {
	/**
	 *
	 * @type {Array<JobBuild>}
	 * @memberof HubConfigJobs
	 */
	"builds": Array<JobBuild>;
	/**
	 *
	 * @type {Array<JobDeploy>}
	 * @memberof HubConfigJobs
	 */
	"deploys": Array<JobDeploy>;
}

/**
 *
 * @export
 * @interface JobBuild
 */
export interface JobBuild {
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"createdAt": string;
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"finishedAt"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"startedAt"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"stdout"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"stderr"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobBuild
	 */
	"id": string;
	/**
	 *
	 * @type {BuildConfig}
	 * @memberof JobBuild
	 */
	"config": BuildConfig;
}

/**
 *
 * @export
 * @interface JobDeploy
 */
export interface JobDeploy {
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"createdAt": string;
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"finishedAt"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"startedAt"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"stdout"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"stderr"?: string | null;
	/**
	 *
	 * @type {string}
	 * @memberof JobDeploy
	 */
	"id": string;
	/**
	 *
	 * @type {DeployConfig}
	 * @memberof JobDeploy
	 */
	"config": DeployConfig;
}

/**
 *
 * @export
 * @interface Mapping
 */
export interface Mapping {
	/**
	 *
	 * @type {BuildConfig}
	 * @memberof Mapping
	 */
	"build": BuildConfig;
	/**
	 *
	 * @type {DeployConfig}
	 * @memberof Mapping
	 */
	"deploy": DeployConfig;
	/**
	 *
	 * @type {string}
	 * @memberof Mapping
	 */
	"id": string;
}

/**
 *
 * @export
 * @interface ProductionApps
 */
export interface ProductionApps {
	/**
	 *
	 * @type {AgentDeploy}
	 * @memberof ProductionApps
	 */
	"agent": AgentDeploy;
	/**
	 *
	 * @type {Array<string>}
	 * @memberof ProductionApps
	 */
	"apps": Array<string>;
}

/**
 * AutomateApi - axios parameter creator
 * @export
 */
export const AutomateApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {BuildConfig} buildConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		build: async (buildConfig: BuildConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'buildConfig' is not null or undefined
			assertParamExists("build", "buildConfig", buildConfig);
			const localVarPath = `/api/automate/build`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(buildConfig, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {DeployConfig} deployConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deploy: async (deployConfig: DeployConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'deployConfig' is not null or undefined
			assertParamExists("deploy", "deployConfig", deployConfig);
			const localVarPath = `/api/automate/deploy`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(deployConfig, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/automate/config`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AutomateApi - functional programming interface
 * @export
 */
export const AutomateApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = AutomateApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {BuildConfig} buildConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async build(buildConfig: BuildConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.build(buildConfig, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {DeployConfig} deployConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deploy(deployConfig: DeployConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deploy(deployConfig, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HubConfig>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AutomateApi - factory interface
 * @export
 */
export const AutomateApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AutomateApiFp(configuration);
	return {
		/**
		 *
		 * @param {BuildConfig} buildConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		build(buildConfig: BuildConfig, options?: any): AxiosPromise<void> {
			return localVarFp.build(buildConfig, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {DeployConfig} deployConfig
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deploy(deployConfig: DeployConfig, options?: any): AxiosPromise<void> {
			return localVarFp.deploy(deployConfig, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getConfig(options?: any): AxiosPromise<HubConfig> {
			return localVarFp.getConfig(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * AutomateApi - object-oriented interface
 * @export
 * @class AutomateApi
 * @extends {BaseAPI}
 */
export class AutomateApi extends BaseAPI {
	/**
	 *
	 * @param {BuildConfig} buildConfig
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AutomateApi
	 */
	public build(buildConfig: BuildConfig, options?: AxiosRequestConfig) {
		return AutomateApiFp(this.configuration).build(buildConfig, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DeployConfig} deployConfig
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AutomateApi
	 */
	public deploy(deployConfig: DeployConfig, options?: AxiosRequestConfig) {
		return AutomateApiFp(this.configuration).deploy(deployConfig, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AutomateApi
	 */
	public getConfig(options?: AxiosRequestConfig) {
		return AutomateApiFp(this.configuration).getConfig(options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * GitHubApi - axios parameter creator
 * @export
 */
export const GitHubApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRepos: async (authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/github/users/connected/repos`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * GitHubApi - functional programming interface
 * @export
 */
export const GitHubApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = GitHubApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getRepos(authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GitHubRepository>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getRepos(authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * GitHubApi - factory interface
 * @export
 */
export const GitHubApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = GitHubApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRepos(authenticationToken?: string, options?: any): AxiosPromise<Array<GitHubRepository>> {
			return localVarFp.getRepos(authenticationToken, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * GitHubApi - object-oriented interface
 * @export
 * @class GitHubApi
 * @extends {BaseAPI}
 */
export class GitHubApi extends BaseAPI {
	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof GitHubApi
	 */
	public getRepos(authenticationToken?: string, options?: AxiosRequestConfig) {
		return GitHubApiFp(this.configuration).getRepos(authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OperationAgentsApi - axios parameter creator
 * @export
 */
export const OperationAgentsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBuildJobs: async (authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/agents/build`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDeployJobs: async (authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/agents/deploy`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProductionApps: async (authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/agents/production/apps`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * OperationAgentsApi - functional programming interface
 * @export
 */
export const OperationAgentsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = OperationAgentsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getBuildJobs(authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgentBuild>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildJobs(authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getDeployJobs(authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgentDeploy>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployJobs(authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getProductionApps(authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductionApps>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getProductionApps(authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OperationAgentsApi - factory interface
 * @export
 */
export const OperationAgentsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OperationAgentsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBuildJobs(authenticationToken?: string, options?: any): AxiosPromise<Array<AgentBuild>> {
			return localVarFp.getBuildJobs(authenticationToken, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDeployJobs(authenticationToken?: string, options?: any): AxiosPromise<Array<AgentDeploy>> {
			return localVarFp.getDeployJobs(authenticationToken, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProductionApps(authenticationToken?: string, options?: any): AxiosPromise<Array<ProductionApps>> {
			return localVarFp.getProductionApps(authenticationToken, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * OperationAgentsApi - object-oriented interface
 * @export
 * @class OperationAgentsApi
 * @extends {BaseAPI}
 */
export class OperationAgentsApi extends BaseAPI {
	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationAgentsApi
	 */
	public getBuildJobs(authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationAgentsApiFp(this.configuration).getBuildJobs(authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationAgentsApi
	 */
	public getDeployJobs(authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationAgentsApiFp(this.configuration).getDeployJobs(authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationAgentsApi
	 */
	public getProductionApps(authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationAgentsApiFp(this.configuration).getProductionApps(authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OperationJobsApi - axios parameter creator
 * @export
 */
export const OperationJobsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("_delete", "id", id);
			const localVarPath = `/api/operations/jobs/{id}`
				.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBuildJobs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/jobs/build`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDeployJobs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/jobs/deploy`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * OperationJobsApi - functional programming interface
 * @export
 */
export const OperationJobsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = OperationJobsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async _delete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getBuildJobs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobBuild>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildJobs(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getDeployJobs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobDeploy>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getDeployJobs(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OperationJobsApi - factory interface
 * @export
 */
export const OperationJobsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OperationJobsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete(id: string, options?: any): AxiosPromise<void> {
			return localVarFp._delete(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getBuildJobs(options?: any): AxiosPromise<Array<JobBuild>> {
			return localVarFp.getBuildJobs(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDeployJobs(options?: any): AxiosPromise<Array<JobDeploy>> {
			return localVarFp.getDeployJobs(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * OperationJobsApi - object-oriented interface
 * @export
 * @class OperationJobsApi
 * @extends {BaseAPI}
 */
export class OperationJobsApi extends BaseAPI {
	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationJobsApi
	 */
	public _delete(id: string, options?: AxiosRequestConfig) {
		return OperationJobsApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationJobsApi
	 */
	public getBuildJobs(options?: AxiosRequestConfig) {
		return OperationJobsApiFp(this.configuration).getBuildJobs(options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationJobsApi
	 */
	public getDeployJobs(options?: AxiosRequestConfig) {
		return OperationJobsApiFp(this.configuration).getDeployJobs(options).then((request) => request(this.axios, this.basePath));
	}
}


/**
 * OperationMappingsApi - axios parameter creator
 * @export
 */
export const OperationMappingsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete: async (id: string, authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("_delete", "id", id);
			const localVarPath = `/api/operations/mappings/{id}`
				.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {AddMappingRequest} addMappingRequest
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		add: async (addMappingRequest: AddMappingRequest, authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'addMappingRequest' is not null or undefined
			assertParamExists("add", "addMappingRequest", addMappingRequest);
			const localVarPath = `/api/operations/mappings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			localVarHeaderParameter["Content-Type"] = "application/json-patch+json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(addMappingRequest, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAll: async (authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/operations/mappings`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		run: async (id: string, authenticationToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("run", "id", id);
			const localVarPath = `/api/operations/mappings/{id}/run`
				.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}


			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * OperationMappingsApi - functional programming interface
 * @export
 */
export const OperationMappingsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = OperationMappingsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async _delete(id: string, authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {AddMappingRequest} addMappingRequest
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async add(addMappingRequest: AddMappingRequest, authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mapping>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.add(addMappingRequest, authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAll(authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Mapping>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async run(id: string, authenticationToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.run(id, authenticationToken, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * OperationMappingsApi - factory interface
 * @export
 */
export const OperationMappingsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = OperationMappingsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		_delete(id: string, authenticationToken?: string, options?: any): AxiosPromise<void> {
			return localVarFp._delete(id, authenticationToken, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {AddMappingRequest} addMappingRequest
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		add(addMappingRequest: AddMappingRequest, authenticationToken?: string, options?: any): AxiosPromise<Mapping> {
			return localVarFp.add(addMappingRequest, authenticationToken, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAll(authenticationToken?: string, options?: any): AxiosPromise<Array<Mapping>> {
			return localVarFp.getAll(authenticationToken, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		run(id: string, authenticationToken?: string, options?: any): AxiosPromise<void> {
			return localVarFp.run(id, authenticationToken, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * OperationMappingsApi - object-oriented interface
 * @export
 * @class OperationMappingsApi
 * @extends {BaseAPI}
 */
export class OperationMappingsApi extends BaseAPI {
	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationMappingsApi
	 */
	public _delete(id: string, authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationMappingsApiFp(this.configuration)._delete(id, authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AddMappingRequest} addMappingRequest
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationMappingsApi
	 */
	public add(addMappingRequest: AddMappingRequest, authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationMappingsApiFp(this.configuration).add(addMappingRequest, authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationMappingsApi
	 */
	public getAll(authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationMappingsApiFp(this.configuration).getAll(authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof OperationMappingsApi
	 */
	public run(id: string, authenticationToken?: string, options?: AxiosRequestConfig) {
		return OperationMappingsApiFp(this.configuration).run(id, authenticationToken, options).then((request) => request(this.axios, this.basePath));
	}
}


